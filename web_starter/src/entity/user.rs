//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::ActiveValue;
use sea_orm::entity::prelude::*;
use sea_orm::prelude::async_trait::async_trait;
use serde::{Deserialize, Serialize};
use crate::id;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_code: String,
    pub username: String,
    pub password: String,
    pub dept_code: Option<String>,
    pub role_code: Option<String>,
    pub menus: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    
    // 这里的self为什么可以改成mut 
    async fn before_save<C>(mut self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait
    {
        if insert {
            self.id = ActiveValue::Set(id::next_id() as i32);
        }
        Ok(self)
    }
}
